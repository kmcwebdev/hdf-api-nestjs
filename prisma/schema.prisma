// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id                         Int                 @id @default(autoincrement())
  profileId                  Int?                @unique
  profile                    UserProfile?        @relation(fields: [profileId], references: [id])
  email                      String              @unique
  password                   String
  userType                   String
  isLocked                   Boolean             @default(true)
  registeredById             Int?
  registeredBy               User?               @relation("EncoderToUser", fields: [registeredById], references: [id])
  listOfEncodedAccounts      User[]              @relation("EncoderToUser")
  passwordResetToken         String?             @unique
  passwordResetTokenExpire   DateTime?
  passwordChangedAt          DateTime?
  emailConfirm               Boolean             @default(false)
  guestVisitNotes            GuestVisitNote[]
  memberVisitNotes           MemberVisitNote[]
  clearedVisitors            VisitorStatus[]
  userPermissionLogs         UserPermissionLog[] @relation("PermissionToUser")
  providerUserPermissionLogs UserPermissionLog[] @relation("ProviderToUserPermission")
  lockedLogs                 UserLockStatusLog[] @relation("lockedLogToUser")
  lockedByUsers              UserLockStatusLog[] @relation("lockedUser")
  dateCreated                DateTime            @default(now()) @db.Date
  timeCreated                DateTime            @default(now()) @db.Time


  @@map("users")
}

model Permission {
  id                 Int                 @id @default(autoincrement())
  type               String              @unique
  userPermissionLogs UserPermissionLog[]

  @@map("permissions")
}

model UserPermissionLog {
  userId       Int
  user         User       @relation("PermissionToUser", fields: [userId], references: [id])
  providerId   Int
  User         User       @relation("ProviderToUserPermission", fields: [providerId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  action       String
  date         DateTime   @default(now()) @db.Date
  time         DateTime   @default(now()) @db.Timestamptz

  @@id([userId, providerId])
  @@map("user_permission_logs")
}

model UserLockStatusLog {
  lockedUserId Int
  lockedUser   User     @relation("lockedLogToUser", fields: [lockedUserId], references: [id])
  lockedById   Int
  lockedBy     User     @relation("lockedUser", fields: [lockedById], references: [id])
  operation    String
  dateCreated  DateTime @default(now()) @db.Date
  timeCreated  DateTime @default(now()) @db.Time

  @@id([lockedUserId, lockedById])
  @@map("user_lock_status_logs")
}

model UserProfile {
  id           Int      @id @default(autoincrement())
  user         User?
  firstName    String
  lastName     String
  phoneNumber  String?
  organization String   @default("KMC Community")
  dateCreated  DateTime @default(now()) @db.Date
  timeCreated  DateTime @default(now()) @db.Time

  @@map("user_profiles")
}

model Visitor {
  id                Int              @id @default(autoincrement())
  guest             Boolean
  isBlocked         Boolean          @default(false)
  firstName         String
  lastName          String
  email             String           @unique
  phoneNumber       String
  address           String
  company           String
  clearance         Clearance[]
  tempCheckList     TempCheckList[]
  visitorStatusList VisitorStatus[]
  travelLocations   TravelLocation[]
  asGuest           GuestVisit[]
  guestSurveys      GuestSurvey[]
  asMember          MemberVisit[]
  memberSurvey      MemberSurvey[]
  dateCreated       DateTime         @default(now()) @db.Date
  timeCreated       DateTime         @default(now()) @db.Timestamptz

  @@map("visitors")
}

model VisitorStatus {
  id            Int       @id @default(autoincrement())
  visitorId     Int
  visitor       Visitor   @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  status        String
  isClear       Boolean
  isClearedById Int?
  clearedBy     User?     @relation(fields: [isClearedById], references: [id])
  dateCleared   DateTime? @db.Date
  timeCleared   DateTime? @db.Timestamptz
  dateCreated   DateTime  @default(now()) @db.Date
  timeCreated   DateTime  @default(now()) @db.Timestamptz

  @@map("visitor_status")
}

model TemperatureTag {
  id            Int             @id @default(autoincrement())
  tag           String          @unique
  tempCheckList TempCheckList[]

  @@map("temperature_tags")
}

model TempCheckList {
  id          Int            @id @default(autoincrement())
  temperature Float
  tempTagId   Int
  tag         TemperatureTag @relation(fields: [tempTagId], references: [id])
  visitorId   Int
  visitor     Visitor        @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  dateCreated DateTime       @default(now()) @db.Date
  timeCreated DateTime       @default(now()) @db.Timestamptz

  @@map("visitor_temp_check_list")
}

model GuestVisit {
  id             Int              @id @default(autoincrement())
  visitorId      Int
  visitor        Visitor          @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  siteId         Int
  site           Site             @relation(fields: [siteId], references: [siteId])
  floorId        Int
  floor          Floor            @relation(fields: [floorId], references: [floorId])
  poc            String
  pocEmail       String
  healthTagId    Int
  healthTag      HealthTag        @relation(fields: [healthTagId], references: [id])
  guestVisitNote GuestVisitNote[]
  dateCreated    DateTime         @default(now()) @db.Date
  timeCreated    DateTime         @default(now()) @db.Timestamptz

  @@map("guest_visits")
}

model GuestVisitNote {
  id           Int        @id @default(autoincrement())
  guestVisitId Int
  guestVisit   GuestVisit @relation(fields: [guestVisitId], references: [id], onDelete: Cascade)
  note         String
  authorId     Int
  author       User       @relation(fields: [authorId], references: [id])
  dateCreated  DateTime   @default(now()) @db.Date
  timeCreated  DateTime   @default(now()) @db.Timestamptz

  @@map("guest_visit_notes")
}

model GuestSurvey {
  id          Int      @id @default(autoincrement())
  visitorId   Int
  visitor     Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  questionId  Int
  question    Question @relation(fields: [questionId], references: [id])
  answer      String
  dateCreated DateTime @default(now()) @db.Date
  timeCreated DateTime @default(now()) @db.Timestamptz

  @@map("guest_serveys")
}

model MemberVisit {
  id              Int               @id @default(autoincrement())
  visitorId       Int
  visitor         Visitor           @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  siteId          Int
  site            Site              @relation(fields: [siteId], references: [siteId])
  floorId         Int
  floor           Floor             @relation(fields: [floorId], references: [floorId])
  company         String
  workTypeId      Int
  workType        WorkType          @relation(fields: [workTypeId], references: [id])
  leaveTypeId     Int?
  leaveType       LeaveType?        @relation(fields: [leaveTypeId], references: [id])
  healthTagId     Int
  healthTag       HealthTag         @relation(fields: [healthTagId], references: [id])
  memberVisitNote MemberVisitNote[]
  dateCreated     DateTime          @default(now()) @db.Date
  timeCreated     DateTime          @default(now()) @db.Timestamptz

  @@map("member_visits")
}

model MemberVisitNote {
  id            Int         @id @default(autoincrement())
  memberVisitId Int
  memberVisit   MemberVisit @relation(fields: [memberVisitId], references: [id], onDelete: Cascade)
  note          String
  authorId      Int
  author        User        @relation(fields: [authorId], references: [id])
  dateCreated   DateTime    @default(now()) @db.Date
  timeCreated   DateTime    @default(now()) @db.Timestamptz

  @@map("member_visit_notes")
}

model MemberSurvey {
  id          Int      @id @default(autoincrement())
  visitorId   Int
  visitor     Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  questionId  Int
  question    Question @relation(fields: [questionId], references: [id])
  answer      String
  dateCreated DateTime @default(now()) @db.Date
  timeCreated DateTime @default(now()) @db.Timestamptz

  @@map("member_surveys")
}

model Clearance {
  id           Int      @id @default(autoincrement())
  visitorId    Int
  visitor      Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  clearanceUrl String?
  notes        String
  dateCreated  DateTime @default(now()) @db.Date
  timeCreated  DateTime @default(now()) @db.Timestamptz

  @@map("clearance")
}

model WorkType {
  id          Int           @id @default(autoincrement())
  type        String        @unique
  memberVisit MemberVisit[]

  @@map("work_types")
}

model LeaveType {
  id          Int           @id @default(autoincrement())
  type        String        @unique
  memberVisit MemberVisit[]

  @@map("leave_types")
}

model HealthTag {
  id           Int           @id @default(autoincrement())
  tag          String        @unique
  guestVisits  GuestVisit[]
  memberVisits MemberVisit[]

  @@map("health_tags")
}

model Question {
  id            Int            @id @default(autoincrement())
  question      String
  multiSelect   Boolean        @default(false)
  critical      Boolean        @default(true)
  questionOrder Int
  answers       Answer[]
  guestSurveys  GuestSurvey[]
  memberSurveys MemberSurvey[]

  @@map("questions")
}

model Answer {
  id        Int        @id @default(autoincrement())
  answer    String     @unique
  questions Question[]

  @@map("answers")
}

model TravelLocation {
  id          Int      @id @default(autoincrement())
  city        String
  visitorId   Int
  visitor     Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  dateCreated DateTime @default(now()) @db.Date
  timeCreated DateTime @default(now()) @db.Timestamptz

  @@map("travel_locations")
}

model Site {
  siteId       Int           @id
  siteName     String        @unique
  floors       Floor[]
  guestVisits  GuestVisit[]
  memberVisits MemberVisit[]

  @@map("sites")
}

model Floor {
  floorId      Int           @id
  floor        String
  sites        Site[]
  guestVisits  GuestVisit[]
  memberVisits MemberVisit[]

  @@map("floors")
}
